name: Portfolio Analysis Cron

on:
  schedule:
    # Run every hour at minute 0
    - cron: '0 * * * *'
  workflow_dispatch:
    inputs:
      analysis_type:
        description: 'Type of analysis to run'
        required: true
        default: 'portfolio_analysis'
        type: choice
        options:
          - portfolio_analysis
          - risk_assessment
          - event_monitoring
          - knowledge_curation
      portfolio:
        description: 'Portfolio tickers (comma-separated)'
        required: false
        default: 'AAPL,GOOGL,MSFT,AMZN,TSLA'
        type: string

jobs:
  trigger-analysis:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up environment
      run: |
        echo "üöÄ Starting portfolio analysis cron job..."
        echo "‚è∞ Scheduled run at: $(date)"
        echo "üîó Target URL: ${{ secrets.VERCEL_DEPLOYMENT_URL }}"
        
    - name: Trigger Portfolio Analysis
      run: |
        # Get portfolio from input or use default
        PORTFOLIO="${{ github.event.inputs.portfolio || 'AAPL,GOOGL,MSFT,AMZN,TSLA' }}"
        ANALYSIS_TYPE="${{ github.event.inputs.analysis_type || 'portfolio_analysis' }}"
        
        echo "üìä Analysis Type: $ANALYSIS_TYPE"
        echo "üíº Portfolio: $PORTFOLIO"
        
        # Convert comma-separated string to JSON array
        PORTFOLIO_JSON=$(echo "$PORTFOLIO" | sed 's/,/","/g' | sed 's/^/["/' | sed 's/$/"]/')
        
        # Trigger cron job
        RESPONSE=$(curl -s -X POST "${{ secrets.VERCEL_DEPLOYMENT_URL }}/api/scheduler/cron" \
          -H "Content-Type: application/json" \
          -H "X-Cron-Secret: ${{ secrets.CRON_SECRET }}" \
          -d "{
            \"action\": \"check_jobs\",
            \"secret\": \"${{ secrets.CRON_SECRET }}\"
          }" \
          -w "HTTP_STATUS:%{http_code}")
        
        HTTP_STATUS=$(echo "$RESPONSE" | grep -o "HTTP_STATUS:[0-9]*" | cut -d: -f2)
        RESPONSE_BODY=$(echo "$RESPONSE" | sed 's/HTTP_STATUS:[0-9]*$//')
        
        echo "üì° HTTP Status: $HTTP_STATUS"
        echo "üìã Response: $RESPONSE_BODY"
        
        if [ "$HTTP_STATUS" -eq 200 ]; then
          echo "‚úÖ Cron job triggered successfully"
        else
          echo "‚ùå Cron job failed with status $HTTP_STATUS"
          exit 1
        fi
        
    - name: Trigger Supervisor Analysis
      run: |
        # Get portfolio from input or use default
        PORTFOLIO="${{ github.event.inputs.portfolio || 'AAPL,GOOGL,MSFT,AMZN,TSLA' }}"
        
        # Convert comma-separated string to JSON array
        PORTFOLIO_JSON=$(echo "$PORTFOLIO" | sed 's/,/","/g' | sed 's/^/["/' | sed 's/$/"]/')
        
        echo "ü§ñ Triggering supervisor analysis..."
        
        # Trigger comprehensive portfolio analysis
        RESPONSE=$(curl -s -X POST "${{ secrets.VERCEL_DEPLOYMENT_URL }}/api/supervisor" \
          -H "Content-Type: application/json" \
          -d "{
            \"action\": \"analyze_portfolio\",
            \"portfolio\": $PORTFOLIO_JSON
          }" \
          -w "HTTP_STATUS:%{http_code}")
        
        HTTP_STATUS=$(echo "$RESPONSE" | grep -o "HTTP_STATUS:[0-9]*" | cut -d: -f2)
        RESPONSE_BODY=$(echo "$RESPONSE" | sed 's/HTTP_STATUS:[0-9]*$//')
        
        echo "üì° HTTP Status: $HTTP_STATUS"
        echo "üìã Response: $RESPONSE_BODY"
        
        if [ "$HTTP_STATUS" -eq 200 ]; then
          echo "‚úÖ Supervisor analysis completed successfully"
          
          # Parse response to check for high-risk events
          if echo "$RESPONSE_BODY" | grep -q '"portfolio_risk":"HIGH"'; then
            echo "üö® HIGH RISK PORTFOLIO DETECTED!"
            echo "::warning::High risk detected in portfolio analysis"
          fi
          
          if echo "$RESPONSE_BODY" | grep -q '"critical_alerts"'; then
            echo "‚ö†Ô∏è Critical alerts found in portfolio"
            echo "::warning::Critical alerts detected in portfolio"
          fi
          
        else
          echo "‚ùå Supervisor analysis failed with status $HTTP_STATUS"
          exit 1
        fi
        
    - name: Health Check All Agents
      run: |
        echo "üîç Running health checks on all agents..."
        
        AGENTS=("risk" "news" "events" "knowledge")
        FAILED_AGENTS=()
        
        for agent in "${AGENTS[@]}"; do
          echo "üîç Checking $agent agent..."
          
          RESPONSE=$(curl -s -X GET "${{ secrets.VERCEL_DEPLOYMENT_URL }}/api/agents/$agent" \
            -w "HTTP_STATUS:%{http_code}")
          
          HTTP_STATUS=$(echo "$RESPONSE" | grep -o "HTTP_STATUS:[0-9]*" | cut -d: -f2)
          
          if [ "$HTTP_STATUS" -eq 200 ]; then
            echo "‚úÖ $agent agent is healthy"
          else
            echo "‚ùå $agent agent failed health check (status: $HTTP_STATUS)"
            FAILED_AGENTS+=("$agent")
          fi
        done
        
        if [ ${#FAILED_AGENTS[@]} -gt 0 ]; then
          echo "::error::Failed agents: ${FAILED_AGENTS[*]}"
          exit 1
        else
          echo "‚úÖ All agents are healthy"
        fi
        
    - name: Test Email Notifications
      run: |
        echo "üìß Testing email notification system..."
        
        RESPONSE=$(curl -s -X POST "${{ secrets.VERCEL_DEPLOYMENT_URL }}/api/notifications/email" \
          -H "Content-Type: application/json" \
          -d '{
            "action": "test_config"
          }' \
          -w "HTTP_STATUS:%{http_code}")
        
        HTTP_STATUS=$(echo "$RESPONSE" | grep -o "HTTP_STATUS:[0-9]*" | cut -d: -f2)
        RESPONSE_BODY=$(echo "$RESPONSE" | sed 's/HTTP_STATUS:[0-9]*$//')
        
        if [ "$HTTP_STATUS" -eq 200 ]; then
          echo "‚úÖ Email system is operational"
        else
          echo "‚ö†Ô∏è Email system test failed (status: $HTTP_STATUS)"
          echo "::warning::Email notification system may be down"
        fi
        
    - name: Storage Health Check
      run: |
        echo "üíæ Checking storage system..."
        
        RESPONSE=$(curl -s -X POST "${{ secrets.VERCEL_DEPLOYMENT_URL }}/api/storage" \
          -H "Content-Type: application/json" \
          -d '{
            "action": "status"
          }' \
          -w "HTTP_STATUS:%{http_code}")
        
        HTTP_STATUS=$(echo "$RESPONSE" | grep -o "HTTP_STATUS:[0-9]*" | cut -d: -f2)
        RESPONSE_BODY=$(echo "$RESPONSE" | sed 's/HTTP_STATUS:[0-9]*$//')
        
        if [ "$HTTP_STATUS" -eq 200 ]; then
          echo "‚úÖ Storage system is operational"
          echo "üìä Storage status: $RESPONSE_BODY"
        else
          echo "‚ùå Storage system check failed (status: $HTTP_STATUS)"
          echo "::error::Storage system is down"
          exit 1
        fi
        
    - name: Summary Report
      run: |
        echo "üìã Portfolio Analysis Cron Job Summary"
        echo "======================================"
        echo "‚è∞ Execution Time: $(date)"
        echo "üîó Target URL: ${{ secrets.VERCEL_DEPLOYMENT_URL }}"
        echo "üíº Portfolio: ${{ github.event.inputs.portfolio || 'AAPL,GOOGL,MSFT,AMZN,TSLA' }}"
        echo "üìä Analysis Type: ${{ github.event.inputs.analysis_type || 'portfolio_analysis' }}"
        echo "‚úÖ Cron job completed successfully"
        echo ""
        echo "üîç Next scheduled run: $(date -d '+1 hour')"
        echo "üìà Monitor results at: ${{ secrets.VERCEL_DEPLOYMENT_URL }}" 